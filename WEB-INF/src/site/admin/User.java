//Generated by ThateJwizard

package site.admin;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import site.core.ConnectionPool;
import site.core.Encription;
import site.core.Util;


/**
* Creates a User object
*/
public class User extends ConnectionPool {

  private long usu_id;
  private String usu_nome;
  private String usu_login;
  private String usu_senha;
  private String usu_email;
  private String usu_status;
  private String usu_expira;
  private String usu_tipo = "0";
  private long hot_key;

  /**
  * Empty constructor
  */
  public User(){}

  /**
  * Constructor by Primary Key
  */
  public User(long usu_id) {
    String sql = "SELECT * FROM res_users WHERE usu_id = ?";

    Connection con = null;

    try{
       con = getConnection();
       PreparedStatement pstmt = con.prepareStatement(sql);
       pstmt.setLong(1, usu_id);
       ResultSet rs = pstmt.executeQuery();
       if(rs.next()){
         this.usu_id = rs.getLong("usu_id");
         this.usu_nome = rs.getString("usu_nome");
         this.usu_login = rs.getString("usu_login");
         this.usu_senha = (new Encription().decode(rs.getString("usu_senha")));
         this.usu_email = rs.getString("usu_email");
         this.usu_status = rs.getString("usu_status");
         this.usu_expira = new Util().sqlToString(rs.getString("usu_expira"));
         this.usu_tipo = rs.getString("usu_tipo");
         this.hot_key = rs.getLong("hot_key");
       }
       cleanUp(pstmt, rs);
    } catch (SQLException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      closeConnection(con);
    }
  }

  /**
  * Constructor by ResultSet
  */
  public User(ResultSet rs) {
    try{
       this.usu_id = rs.getLong("usu_id");
         this.usu_nome = rs.getString("usu_nome");
         this.usu_login = rs.getString("usu_login");
         this.usu_senha = (new Encription().decode(rs.getString("usu_senha")));
         this.usu_email = rs.getString("usu_email");
         this.usu_status = rs.getString("usu_status");
         this.usu_expira = new Util().sqlToString(rs.getString("usu_expira"));
         this.usu_tipo = rs.getString("usu_tipo");
         this.hot_key = rs.getLong("hot_key");
    } catch (SQLException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
  * @return Total number of records in res_users
  */
  public long getCount(){
    long ret = 0;
    String sql = "SELECT COUNT(*) AS TOTAL FROM res_users";
    Connection con = null;
    try{
       con = getConnection();
       PreparedStatement pstmt = con.prepareStatement(sql);
       ResultSet rs = pstmt.executeQuery();
       rs.next();
       ret = rs.getLong("TOTAL");
       cleanUp(pstmt, rs);
    } catch (SQLException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      closeConnection(con);
    }
    return ret;
  }

  /**
  * @param The column to order by
  * @return A list of Usuario objects
  */
  public List<User> getList(String arg0){
    List<User> coll = new ArrayList<User>();
    String sql = "SELECT * FROM res_users ORDER BY ?";

    Connection con = null;
    try{
       con = getConnection();
       PreparedStatement pstmt = con.prepareStatement(sql);
       pstmt.setString(1, arg0);
       ResultSet rs = pstmt.executeQuery();
       while(rs.next()) coll.add( new User(rs));
       cleanUp(pstmt, rs);
    } catch (SQLException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      closeConnection(con);
    }
    return coll;
  }

  /**
  * @param Start row
  * @param Total rows
  * @param The column to order by
  * @return A list of Usuario objects, starting in Start row and with Total rows
  */
  public List<User> getList(long arg0, long arg1, String arg2){
    List<User> coll = new ArrayList<User>();
    String sql = "SELECT * FROM res_users ORDER BY ? LIMIT ?,?";

    Connection con = null;
    try{
       con = getConnection();
       PreparedStatement pstmt = con.prepareStatement(sql);
       pstmt.setString(1, arg2);
       pstmt.setLong(2, arg0);
       pstmt.setLong(3, arg1);
       ResultSet rs = pstmt.executeQuery();
       while(rs.next()) coll.add( new User(rs));
       cleanUp(pstmt, rs);
    } catch (SQLException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      closeConnection(con);
    }
    return coll;
  }

  /**
  * @param Start row
  * @param Total rows
  * @param The column to order by
  * @param ASC for ascendant, DESC for descendant
  * @return A list of Usuario objects, starting in Start row and with Total rows
  */
  public List<User> getList(long arg0, long arg1, String arg2, String arg3){
    List<User> coll = new ArrayList<User>();
    String sql = "SELECT * FROM res_users ORDER BY ? " + arg3 + " LIMIT ?,?";

    Connection con = null;
    try{
       con = getConnection();
       PreparedStatement pstmt = con.prepareStatement(sql);
       pstmt.setString(1, arg2);
       pstmt.setLong(2, arg0);
       pstmt.setLong(3, arg1);
       ResultSet rs = pstmt.executeQuery();
       while(rs.next()) coll.add( new User(rs));
       cleanUp(pstmt, rs);
    } catch (SQLException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      closeConnection(con);
    }
    return coll;
  }

  /**
  * @param Start row
  * @param Total rows
  * @param The column to order by
  * @param ASC for ascendant, DESC for descendant
  * @param A filter for the list
  * @return A list of Usuario objects, starting in Start row and with Total rows
  */
  public List<User> getList(long arg0, long arg1, String arg2, String arg3, String arg4){
    List<User> coll = new ArrayList<User>();
    String sql = "SELECT * FROM res_users WHERE " + arg4 + " ORDER BY ? " + arg3 + " LIMIT ?,?";

    Connection con = null;
    try{
       con = getConnection();
       PreparedStatement pstmt = con.prepareStatement(sql);
       pstmt.setString(1, arg2);
       pstmt.setLong(2, arg0);
       pstmt.setLong(3, arg1);
       ResultSet rs = pstmt.executeQuery();
       while(rs.next()) coll.add( new User(rs));
       cleanUp(pstmt, rs);
    } catch (SQLException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      closeConnection(con);
    }
    return coll;
  }

  /**
  * @return true if success, false if not
  */
  public boolean save(){
     boolean ret = false;
     String sql = "";
     Connection con = null;
     PreparedStatement pstmt = null;
     try{
        con = getConnection();
        if(this.usu_id <= 0)
        {
		    sql = "INSERT INTO res_users ( usu_nome,usu_login,usu_senha,usu_email,usu_status,usu_expira,usu_tipo,hot_key )";
		    sql += "VALUES (?,?,?,?,?,?,?,?)";
	        pstmt = con.prepareStatement(sql);
	        pstmt.setString(1,this.getUsu_nome());
	        pstmt.setString(2,this.getUsu_login());
	        pstmt.setString(3,(new Encription().encode(this.getUsu_senha())));
	        pstmt.setString(4,this.getUsu_email());
	        pstmt.setString(5,this.getUsu_status());
	        pstmt.setString(6,new Util().stringToSql(this.getUsu_expira() + "00000000"));
	        pstmt.setString(7,this.getUsu_tipo());
	        pstmt.setLong(8, this.getHot_key());
	        cleanUp(pstmt);
        } else {
	        sql = "UPDATE res_users SET ";
	        sql += "usu_nome = ?,usu_login = ?,usu_senha = ?,usu_email = ?,usu_status = ?,usu_expira = ?,usu_tipo = ?";
	        sql += " WHERE usu_id = ?";
	        pstmt = con.prepareStatement(sql);
	        pstmt.setString(1,this.getUsu_nome());
	        pstmt.setString(2,this.getUsu_login());
	        pstmt.setString(3,(new Encription().encode(this.getUsu_senha())));
	        pstmt.setString(4,this.getUsu_email());
	        pstmt.setString(5,this.getUsu_status());
	        pstmt.setString(6,new Util().stringToSql(this.getUsu_expira()));
	        pstmt.setString(7,this.getUsu_tipo());
	        pstmt.setLong(8, this.usu_id);
	        cleanUp(pstmt);
        }
        int rows = pstmt.executeUpdate();
      	ret = (rows > 0);
        if(this.usu_id <= 0)
        {
             sql = "SELECT usu_id FROM res_users WHERE hot_key = ? ORDER BY usu_id DESC LIMIT 1";
 	         pstmt = con.prepareStatement(sql);
 	         pstmt.setLong(1, this.getHot_key());
             ResultSet rs = pstmt.executeQuery();
             rs.next();
             this.usu_id = rs.getLong("usu_id");
             cleanUp(pstmt, rs);
        }
        cleanUp(pstmt);
    } catch (SQLException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      closeConnection(con);
    }
    return ret;
  }


  public void savePerfil(String[] arg0){
        deletePerfil();
        if(arg0.length > 0)
        {
           for(int xx=0;xx < arg0.length;xx++)
           {
               if(Long.parseLong(arg0[xx]) > 0) saveThisPerfil(Long.parseLong(arg0[xx]));
           }
        }
  }

  private void saveThisPerfil(long arg0){
	String sql = "INSERT INTO res_userxprofile ( usu_id, prf_id ) VALUES (?,?)";
	Connection con = null;
	try{
	   con = getConnection();
	   PreparedStatement pstmt = con.prepareStatement(sql);
	   pstmt.setLong(1,this.usu_id);
	   pstmt.setLong(2,arg0);
	   pstmt.executeUpdate();
	   cleanUp(pstmt);
   } catch (SQLException e) {
	 e.printStackTrace();
   } catch (Exception e) {
	 e.printStackTrace();
   } finally {
	 closeConnection(con);
   }
  }

  public void deletePerfil(){
	String sql = "DELETE FROM res_userxprofile WHERE usu_id = ?";
	Connection con = null;
	try{
	   con = getConnection();
	   PreparedStatement pstmt = con.prepareStatement(sql);
	   pstmt.setLong(1,this.usu_id);
	   pstmt.executeUpdate();
	   cleanUp(pstmt);
   } catch (SQLException e) {
	 e.printStackTrace();
   } catch (Exception e) {
	 e.printStackTrace();
   } finally {
	 closeConnection(con);
   }
  }


  /**
  * @param The Primary Key
  * @return true if success, false if not
  */
  public boolean delete(){
     boolean ret = false;
     String sql = "DELETE FROM res_users WHERE usu_id = ?";
     Connection con = null;
     try{
        con = getConnection();
        PreparedStatement pstmt = con.prepareStatement(sql);
        pstmt.setLong(1, this.getUsu_id());
        int rows = pstmt.executeUpdate();
      	ret = (rows > 0);
        cleanUp(pstmt);
    } catch (SQLException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      closeConnection(con);
    }
    return ret;
  }

	public long validaLoginSenha(String usuario, String senha, long key){
		String sql = "SELECT usu_id FROM res_users WHERE usu_login = ? AND usu_status = 'A' AND usu_tipo = '0' AND usu_senha = ? AND hot_key = ? LIMIT 1";
		long ret = -1;
		Connection con = null;
		try{
			con = getConnection();
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, usuario);
			pstmt.setString(2, new Encription().encode(senha));
			pstmt.setLong(3, key);
			ResultSet rs = pstmt.executeQuery();
			if(rs.next())
				ret = rs.getLong("usu_id");
			cleanUp(pstmt, rs);
		}
		catch (SQLException e){
			e.printStackTrace();
			ret = -2; }
		catch (Exception e){
			e.printStackTrace();
			ret = -3; }
		finally {
			closeConnection(con);
		}
		return ret;
	}

	public int trocarSenha(String usu_login, String usu_senha, String usu_nova_senha, long key) {
		int ret = 0;
		long id = this.validaLoginSenha(usu_login, usu_senha, key);
		if(id <= 0)
			return ret;
		String sql = "UPDATE res_users SET usu_senha = ? WHERE usu_id = ?";
		Connection con = null;
		try{
			con = getConnection();
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, (new Encription().encode(usu_nova_senha)));
			pstmt.setLong(2, id);
			ret = pstmt.executeUpdate();
			cleanUp(pstmt);
		}
		catch (SQLException e){
			e.printStackTrace(); }
		catch (Exception e){
			e.printStackTrace(); }
		finally {
			closeConnection(con);
		}
		return ret;
	}

	public String getPrf_id() {
		String ret = null;
		String sql = "SELECT prf_id FROM res_userxprofile WHERE usu_id = " + this.usu_id;
		Connection con = null;
		try{
			con = getConnection();
			Statement pstmt = con.createStatement();
			ResultSet rs = pstmt.executeQuery(sql);
			String perfis = "";
			while(rs.next())
				perfis += (rs.getString("prf_id") + ",");

			if(perfis.length()>0)
			{
				perfis = perfis.substring(0,perfis.length()-1);
				ret = perfis;
			}
			cleanUp(pstmt, rs);
		}
		catch (SQLException e){
			e.printStackTrace();}
		catch (Exception e){
			e.printStackTrace();}
		finally {
			closeConnection(con);
		}
		return ret;
	}

	public String getIdSessao(){
		Date now = new Date();
		SimpleDateFormat dateformated = new SimpleDateFormat("SSwwssWWHHDDmmdd");
		return dateformated.format(now);
	}

	public long getPrimaryKey(){
		return this.usu_id;
	}

  public void setPrimaryKey(long arg0){
     this.usu_id = arg0;
  }

  public long getUsu_id(){
   return this.usu_id; }

  public String getUsu_nome(){
   return this.usu_nome; }

  public String getUsu_login(){
   return this.usu_login; }

  public String getUsu_senha(){
   return this.usu_senha; }

  public String getUsu_email(){
   return this.usu_email; }

  public String getUsu_status(){
   return this.usu_status; }

  public String getUsu_expira(){
   return this.usu_expira; }

  public String getUsu_tipo(){
   return this.usu_tipo; }

  public void setUsu_id(long arg0){
   this.usu_id = arg0; }

  public void setUsu_nome(String arg0){
   this.usu_nome = arg0; }

  public void setUsu_login(String arg0){
   this.usu_login = arg0; }

  public void setUsu_senha(String arg0){
   this.usu_senha = arg0; }

  public void setUsu_email(String arg0){
   this.usu_email = arg0; }

  public void setUsu_status(String arg0){
   this.usu_status = arg0; }

  public void setUsu_expira(String arg0){
   this.usu_expira = arg0; }

  public void setUsu_tipo(String arg0){
   this.usu_tipo = arg0; }

  public long getHot_key() {
	return hot_key;  }

  public void setHot_key(long hot_key) {
	this.hot_key = hot_key;  }
}

